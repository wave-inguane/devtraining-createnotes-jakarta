<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <client_script><![CDATA[function($scope,$rootScope) {
	/* widget controller */
	var c = this;
	//---------------------------------------------------
	//Listent to selected note
	//---------------------------------------------------
	$rootScope.$on('selectNote', function(event,data) {
		// NoteID was sent from List Notes widget
		console.log('Listener caught NoteID: ' + $rootScope.noteID);

		// get the selected recordâ€™s field values from the server
		// to display in the Notes Body Widget

		// this.server.get() calls the Server script and passes custom input
		// input = {action: '', noteID: ''}
		c.server.get({
			action: 'getNote',
			noteID: $rootScope.noteID
		}).then(function(result) {
			c.data.title = result.data.note.title;
			c.data.note = result.data.note.note;
			c.data.noteID = result.data.note.sys_id;
		});
	});

	//-----------------------------------------------------
	//	Make an update and notify the all
	//-----------------------------------------------------
	c.updateNote = function(updateType) {

		// call the Server script and passes custom input
		// input = {action: '', noteID: '', ...}
		c.server.get({
			action: 'updateNote',
			noteID: c.data.noteID,
			noteBody: c.data.note,
			noteTitle: c.data.title
		}).then(function(result) {
			// When the promise is returned, emit the change
			if (updateType == 'title' || updateType == 'body') { 
				$rootScope.$emit('updateTitle', result.data); //NotifyAll
			}
		});
	}
}

/*
....................................................................................
function($scope,$rootScope) {
		// widget controller 
		var c = this;

		$rootScope.$on('selectNote', function(event,data) { 
			console.log('Listener caught NoteID: ' + $rootScope.noteID); 
		});
}
*/

/*
......................................................................................
function() {
  // widget controller 
  var c = this;
}
*/

/*
Widget API
Service Portal has an API known as the Widget API. The Widget API contains classes for both client-side and server-side scripting.

Client-side API
The client-side Widget API classes are:

spUtil: Contains utility methods to perform common functions in a Service Portal widget client script. Access the methods from this class using spUtil. For example, spUtil.addErrorMessage().
addErrorMessage(): display an error message
addInfoMessage(): display an informational message
addTrivialMessage(): display a message which automatically disappears after a short period of time
format(): used to build strings from variables (alternative to concatenation)
get(): gets a widget model by ID or sys_id
recordWatch(): watches for updates to a table or filter and returns the value from a callback function
refresh(): calls the server and replaces the current options and data objects with the server response
update(): updates the data object on the server within a given scope
spModal: Methods provide an alternative way to show alerts, prompts, and confirmation dialogs. Access the methods from this class using spModal. For example, spModal.alert().
alert(): displays an alert
confirm(): displays a confirmation message
open(): opens a modal using the specified options
prompt(): displays a prompt for user input
spAriaUtil: Uses an AngularJS service to show messages on a screen reader. Access the method from this class using spAriaUtil. For example, spAriaUtil.sendLiveMessage().
sendLiveMessage(): announce a message to a screen reader
For the complete API documentation, including method arguments and return values, follow the links to the API classes.
*/]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>notes-body</id>
        <internal>false</internal>
        <link/>
        <name>Notes Body</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	if (input && input.noteID) {
		var note = new GlideRecord('x_snc_createnotes_note');
		if (note.get(input.noteID))//if true the record exist
		{
			if (input.action == 'getNote') {
				data.note = {};
				$sp.getRecordValues(data.note, note, "title, note, sys_id");
				// result = {};
				// result.data = data.note;
				// return result;
			}
			else 
				if (input.action == 'updateNote') { 
					note.title = input.noteTitle; 
					note.note = input.noteBody; 
					note.update(); 
					// Need to update the data object with the new title
					// and first 20 characters of the note (do not want to write huge
					// strings to the Notes List widget)
					data.title = note.getValue('title');
					data.note = note.getValue('note').slice(0,20);
					// result = {};
					// result.data = data;
					// return result;
				}
		}
	}
})();


/*
.............................................................................
(function() {
  // populate the 'data' object 
  // e.g., data.table = $sp.getValue('table'); 

})();
*/

/*
Server-side API
The server-side Widget API class is:

GlideSPScriptable: Methods for use in Service Portal widget Server Scripts. Access the GlideSPScriptable methods using the global $sp object. For example, $sp.canRead().
canReadRecord(): returns true if the user can read the specified GlideRecord
getCatalogItem(): returns a model and view model for a sc_cat_item or sc_cat_item_guide
getDisplayValue: returns the display value of the specified field from either the widget's sp_instance or sp_portal record
getField(): returns information about the specified field in a GlideRecord
getFields(): checks the specified list of field names, and returns an array of valid field names
getFieldsObject(): checks the specified list of field names and returns an object of valid field names
getForm(): returns the form
getListColumns(): returns a list of the specified table's columns in the specified view
getMenuHREF(): returns the (?id=) portion of the URL based on the sp_menu type
getMenuItems(): returns an array of menu items for the specified instance
getParameter(): returns the value of the specified parameter
getPortalRecord(): returns the portal's GlideRecord
getRecord(): returns the current portal context
getRecordDisplayValues(): copies display values for the specified fields into the data parameter
getRecordElements(): for the specified fields, copies the element's name, display value, and value into the data parameter
getRecordValues(): copies values for the specified field names from the GlideRecord into the data parameter
getStream(): gets the activity stream for the specified record. This method works on tables which extend the Task table
getUserInitials(): returns the user's initials
getValue(): returns the value of the specified parameter
getValues(): copies values from the request or instance to the data parameter
getWidget(): gets a widget by id or sys_id, executes that widget's server script using the provided options, then returns the widget model
For the complete API documentation, including method arguments and return values, follow the links to the API classes.
*/]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-19 01:52:51</sys_created_on>
        <sys_id>f866a1b64f0703003b564ea18110c7cd</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>Notes Body</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_f866a1b64f0703003b564ea18110c7cd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-01-02 19:03:33</sys_updated_on>
        <template><![CDATA[<!-- https://<your_instance>.service-now.com/notes?id=notes_home -->

	<div class="panel panel-default" ng-show="c.data.noteID">
	  <div class="panel-heading clearfix">
	    <div class="row">
	      <div class="col-md-12">
	        <input class="form-control" id="note-title" ng-model="c.data.title" ng-change="c.updateNote('title')" ng-model-options="{debounce: 1000}"/>
	      </div>
	    </div>
	  </div>
	  <div class="panel-body">
	    <textarea class="form-control" id="note-body" ng-model="c.data.note" ng-change="c.updateNote('body')" ng-model-options="{debounce: 1000}" ></textarea>
	  </div>
	</div>

<!--
<div class="panel panel-default" ng-show="c.data.noteID">
  <div class="panel-heading clearfix">
    <div class="row">
      <div class="col-md-12">
        <input class="form-control" id="note-title" ng-model="c.data.title" />
      </div>
    </div>
  </div>
  <div class="panel-body">
    <textarea class="form-control" id="note-body" ng-model="c.data.note" ></textarea>
  </div>
</div>
-->]]></template>
    </sp_widget>
</record_update>
